1.  What is inheritance ?
=> Inheritance means sub or child class inherits the properties and charecteristics of the super or parent
   class.

2. Which inheritance is not supported by Dart? Why?
=> Multiple inheritance does not supported because of this inheritance occurs when a class inherits more than
   one parent class. This is not possible. So, Dart not supported multiple inheritance and that's the reason
   of Dart also not supported hybrid inheritance because hybrid inheritance is a combination of all inheritance.

3. What is advantages of inheritance?
=> 1. Inheritance is used to derived the classes using existing classes, which provides code reusability.
   2. You can reuse the members of your parent class.
   3. Due to code reusability development time of software is reduced.
   4. Saves time and effort as the main code need not be written again.

4. Difference between Inheritance and Encapsulation.
=>               INHERITANCE                                         ENCAPSULATION 
    1. It means sub or child class inherits properties  1. It means the wrapping up of data and information 
       and characteristics of the super or parent          in a single unit.
       class.
  
   2. Its facilities code reuse and supports hiera-     2. It allows us to hide implementation details and 
      rchical relationships between classes.               provode controlled access to the data.

5. Difference between Inheritance and Abstraction.
=>           INHERITANCE                                                 ABSTRACTION 
   1. It means sub or child class inherits properties    1. It means used to hide unnecessary information and
      and characteristics of the super or parent            display only necessary information to the users 
      class.                                                interacting.
   
   2. It promotes code reusability by allowing a sub-    2. It helps in designing a system where the impleme-
      class to inherit the characteristics of a super-      ntation details are hidden from user, allowing them
      class.                                                to interact witn the essential functionalities.

6. Difference between Inheritance and Polymorphism.
=>            INHERITANCE                                              POLYMORPHISM 
   1. It means sub or child class inherits properties       1. Polymorphism means one named method has diffe-
      and characteristics of the super or parent class.        rent different forms its called polymorphism.
      
   2. It is basically applied to classes.                   2. It is basically applied to functions or methods.

   3. It is supports the concept of reusability and         3. It is allows the object to decide which from 
      reduces code length in object-oriented                   of the function to implement at compile-time
      programming.                                             as well as run-time.

   4. It is used in pattern designing.                      4. It is also used in designing.

7. Can we override static method in dart?
=> No, It is not possible to override static method in Dart.

8. Can we overload static method in dart? 
=> Dart doesn't support method overloading.

9. Can a class implement more than one interface in dart?
=> A class implement multiple interface and it must implement all the methods and properties defined in each
   interface.

10. Can a class extend more than one class in dart?
=> Yes, One class extends a parent class and another class extends the class that extendes=d the parent class 
   because dart supports multiple inheritance.

11. Can an interface extend more than one interface in dart?
=>  Yes, Dart allows an interface to extend more than one interface.

12. What will happen if a class implements two interfaces and they both have a method with same name and
    signature?
=>  It is called method overriding polymorphism.

13. Can we pass an object of a subclass to a method expecting an object of the super class?
=> Yes, you can pass that because subclass and superclass are related to each other by inheritance.

14. Are static members inherited to sub classes?
=> No, There is no inheritance of static members.

15. What happens if the parent and the child class have a field with same identifier?
=> 

16. Are constructors and initializers also inherited to sub classes?
=> Constructors are not inherited a subclass.

17. How do you restrict a member of a class from inheriting by its sub classes?
=> Using private method, because private members of class can't be inherited.

18. How do you implement multiple inheritance in Dart?
=> Dart does not support traditional multiple class inheritance, but mixins provide a flexible and controlled 
   way to achieve similar functionality.

19. Can a class extend by itself in Dart?
=>  Dart allows single inheritance which means a class can extends from a single parent.

20. How do you override a private method in Dart?
=> Create a public method in parent class and pass that private method in it.

21. When to overload a method in Dart and when to override it?
=>  

22. What the order is of extends and implements keyword on Dart class declaration?
=> In Dart, when declaring a class that extends a superclass and implements one or more interfaces, the extends 
   keyword comes before the implements keyword.

23. How do you prevent overriding a Dart method without using the final modifier?
=> In Dart, if you want to prevent a method from being overridden in a subclass without using the final 
   modifier, you can achieve this by using the override annotation along with a private identifier. By making 
   the method private in the superclass and using the override annotation in the subclass. 

24. What are the rules of method overriding in Dart?
=> A. The overriding method must be defined in subclass, not in the same class.
   B. The static and final method cannot be inherited in the subclass as they are accesible in their own class.
   C. The constructor of the superclass cannot be inherited in a subclass.
   D. A method that cannot be inherited, then it cannot be overridden.

25. Difference between method overriding and method overloading in Dart.
=>             Method Overriding                                  Method overloading
  1. Method overriding is the concept of defining          1. Method overloading is the concept of defining 
     two or more identical methods, having the same           two or more methods with same name but different
     name and signature.                                      signature.
 2.  It is run-time polymorphism.                          2. It is compile-time polymorphism. 
 
 26. What happens when a class implements two interfaces and both declare field(variable) with same name?
=> If a class implement two interfaces and each interfaces declares a method with same signature and reaturn 
   type then in effect there is only one method and they are not distinguishable.

27. Can a subclass instance method override a superclass static method?
=>  An instance method cannot override a static method.

28. Can a subclass static method hide supeclass instance method?
=> If a subclass has a static method with the same signature as a static method in the superclass then the
   method in the subclass hides the one in the superclass.

29. Can supperclass access subclass member?
=> The general rule is that a superclass (or base class) cannot directly access the members of its subclasses. 
   The encapsulation principle in OOP suggests that the internal details of a subclass should be hidden from its 
   superclass.

   30. Difference between object oriented and object based language.
   =>            Object-oriented                                        Object-based
      1. It is not need suppoer inheritance, but those         1. It do not support inheritance are usually 
         that do are also termed object-oriented.                 not considered to be true object-oriented.

      2. They support built-in objects.                        2. It does not supports built-in objects.

      3. Ex: C#, Java, VB.Net are example of object-           3. Ex: JavaScript, VB are example of object-based 
             oriented language.                                       language.